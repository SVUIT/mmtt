name: create-pr-preview-link

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  pull_request:
    branches: [ "main" ]

env:
  # github.repository as <account>/<repo>
  ORG_NAME: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into github registry 
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.ORG_NAME }}
          password: ${{ secrets.TOKEN }}

      - name: Convert repository name to lowercase
        id: convert_repo_name
        run: |
           echo "LC_REGISTRY=$(echo '${{ env.REGISTRY }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
           echo "LC_REPO_NAME=$(echo '${{ env.REPO_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Set IMAGE_NAME
      # SVUIT/img2md/pr-1:latest 
      - name: Set IMAGE_NAME
        run: echo "IMAGE_NAME=${{ env.LC_REGISTRY }}/${{ env.LC_REPO_NAME }}/pr-${{ github.event.pull_request.number }}:latest" >> $GITHUB_ENV

      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}
          platforms: linux/amd64
    
      - name: Call Appwrite API to deploy
        id: deploy
        run: |
          RESPONSE=$(curl -s -X POST "https://67d5bb8cc07395d8f67a.appwrite.global/create-application" -d '{
            "name":"${{ env.REPO_NAME }}-PR-${{ github.event.pull_request.number }}",
            "dockerImage":"${{ env.IMAGE_NAME }}",
            "port": ${{vars.PORT}}
          }')
          
          echo "API Response: $RESPONSE"
          
          DOMAIN=$(echo $RESPONSE | jq -r '.domain')
          APPLICATION_ID=$(echo $RESPONSE | jq -r '.applicationId')
          echo "APPLICATION_ID=$APPLICATION_ID" >> $GITHUB_ENV
          echo "DOMAIN=$DOMAIN" >> $GITHUB_ENV
          if [ "$DOMAIN" != "null" ]; then
            echo "Deployed at: $DOMAIN"
            echo "ApplicationID at: $APPLICATION_ID"
          else
            echo "Failed to get domain!"
            exit 1
          fi

      - name: Post comment to Watchdog
        run: |
          RESPONSE=$(curl -s -X POST \
          -H "Authorization: Bearer ${{ secrets.WATCHDOG_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "pr_number": ${{ github.event.pull_request.number }},
            "comment_body": "{\"preview_link\": \"http://${{env.DOMAIN}}\", \"application_id\": \"${{env.APPLICATION_ID}}\"}",
            "repo_name": "${{ env.ORG_NAME }}/${{ env.REPO_NAME }}"
          }' \
          https://watchdog.svuit.org/comment_on_pr)
          echo "API Response: $RESPONSE"

        env:
          GH_TOKEN: ${{ secrets.TOKEN }}
# "repo_name": "${{ github.repository }}"
# "pr_number": {{ github.event.pull_request.number }},